#! /usr/bin/env python3

import argparse
import logging
import time
from datetime import datetime
import jsonrpcclient
import psutil
import numpy


# disable jsonrpcclient verbose logging
logging.getLogger("jsonrpcclient.client.request").setLevel(logging.WARNING)
logging.getLogger("jsonrpcclient.client.response").setLevel(logging.WARNING)


def now():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def fstr(v: float):
    return "{:.2f}".format(v)


def basic(client, ip):
    s = client.send(jsonrpcclient.Request("getStats"))
    msg = "QuarkChain Cluster Stats\n\n"
    msg += "CPU:                {}\n".format(psutil.cpu_count())
    msg += "Memory:             {} GB\n".format(
        int(psutil.virtual_memory().total / 1024 / 1024 / 1024)
    )
    msg += "IP:                 {}\n".format(ip)
    msg += "Shards:             {}\n".format(s["shardSize"])
    msg += "Network Id:         {}\n".format(s["networkId"])
    msg += "Peers:              {}\n".format(", ".join(s["peers"]))
    return msg


def stats(client):
    s = client.send(jsonrpcclient.Request("getStats"))
    return {
        "time": now(),
        "syncing": str(s["syncing"]),
        "tps": fstr(s["txCount60s"] / 60),
        "pendingTx": str(s["pendingTxCount"]),
        "confirmedTx": str(s["totalTxCount"]),
        "bps": fstr(s["blockCount60s"] / 60),
        "sbps": fstr(s["staleBlockCount60s"] / 60),
        "cpu": fstr(numpy.mean([s["cpus"]])),
        "root": str(s["rootHeight"]),
        "shards": str([shard.get("height", -1) for shard in s["shards"]]),
    }


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--ip", default="localhost", type=str, help="Cluster IP")
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        dest="verbose",
        help="Show more details",
    )
    parser.add_argument(
        "-i", "--interval", default=10, type=int, help="Query interval in second"
    )
    args = parser.parse_args()

    endpoint = "http://{}:38491".format(args.ip)
    client = jsonrpcclient.HTTPClient(endpoint)

    print(basic(client, args.ip))
    if args.verbose:
        format = "{time:20} {syncing:>8} {tps:>5} {pendingTx:>10} {confirmedTx:>10} {bps:>9} {sbps:>9} {cpu:>9} {root:>7} {shards}"
    else:
        format = "{time:20} {syncing:>8} {root:>7} {shards}"
    print(
        format.format(
            time="Timestamp",
            syncing="Syncing",
            tps="TPS",
            pendingTx="Pend.TX",
            confirmedTx="Conf.TX",
            bps="BPS",
            sbps="SBPS",
            cpu="CPU",
            root="ROOT",
            shards="SHARDS",
        )
    )

    while True:
        print(format.format(**stats(client)))
        time.sleep(args.interval)


if __name__ == "__main__":
    # query stats from local cluster
    main()

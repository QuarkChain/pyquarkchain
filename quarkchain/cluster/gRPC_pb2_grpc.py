# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from quarkchain.cluster import gRPC_pb2 as gRPC__pb2


class ClusterSlaveStub(object):
    """-----------------------------------------------------------------------------
  ---------------- Service definition
  -----------------------------------------------------------------------------
  """

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.SetRootChainConfirmedBlock = channel.unary_unary(
            "/cluster.ClusterSlave/SetRootChainConfirmedBlock",
            request_serializer=gRPC__pb2.SetRootChainConfirmedBlockRequest.SerializeToString,
            response_deserializer=gRPC__pb2.SetRootChainConfirmedBlockResponse.FromString,
        )


class ClusterSlaveServicer(object):
    """-----------------------------------------------------------------------------
  ---------------- Service definition
  -----------------------------------------------------------------------------
  """

    def SetRootChainConfirmedBlock(self, request, context):
        """Master's command for setting rootchain-confirmed block.
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ClusterSlaveServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SetRootChainConfirmedBlock": grpc.unary_unary_rpc_method_handler(
            servicer.SetRootChainConfirmedBlock,
            request_deserializer=gRPC__pb2.SetRootChainConfirmedBlockRequest.FromString,
            response_serializer=gRPC__pb2.SetRootChainConfirmedBlockResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "cluster.ClusterSlave", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))

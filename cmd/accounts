#! /usr/bin/env python3

import argparse
import pprint
from utils import colorify

from quarkchain.accounts import Account


def print_account(a):
    print("Address: {0}".format(colorify("0x" + str(a.address_as_hex), "blue")))
    print("Public Key: {0}".format(colorify(str(a.pubkey_as_hex), "green")))
    print("Private Key: {0}".format(colorify(str(a.privkey_as_hex), "red")))


def main():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(title="quarkchain account management", description="commands to run", dest="cmd")

    parser_new = subparsers.add_parser("new", description="create a new account", help="create a new account")
    parser_new.add_argument("pw", type=str, help="passwd for encrypting your private key")
    parser_new.add_argument("--key", default=None, type=str, help="private key you want to use if you already have one")
    parser_new.add_argument("--path", default=None, type=str, help="absolute path to the keystore file")

    parser_load = subparsers.add_parser("load", description="reads the keystore file specified and dumps the JSON")
    parser_load.add_argument("path", type=str, help="path to the keystore file")
    parser_load.add_argument("pw", type=str, help="password for decrypting your private key")

    args = parser.parse_args()

    if args.cmd == "new":
        a = Account.new(args.pw, key=args.key, path=args.path)
        print("Generated a new account: ")
        print_account(a)

        if args.path:
            print("Writing keystore file (Version 3) to {0}".format(args.path))
            a.dump(include_address=True, include_id=True, write=True)
            print("Success.")
        else:
            print("Raw keystore file (Version 3):")
            print(a.dump(include_address=True, include_id=True, write=False))
    elif args.cmd == "load":
        a = Account.load(args.path, password=args.pw)
        print("Loaded account: ")
        print_account(a)


if __name__ == "__main__":
    main()

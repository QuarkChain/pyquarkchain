# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: quarkchaindocker/pyquarkchain:mainnet1.1.1
    working_directory: /code/pyquarkchain

    steps:
      - checkout

      # Download and cache python modules
      - restore_cache:
          keys:
          - pyquarkchain-dep-{{ checksum "requirements.txt" }}

      - run:
          name: Install Project Dependencies
          command: |
            pip3 install -e .

      - save_cache:
          paths:
            - /usr/local
          key: pyquarkchain-dep-{{ checksum "requirements.txt" }}

  test:
    docker:
      - image: quarkchaindocker/pyquarkchain:mainnet1.1.1
    parallelism: 4
    working_directory: /code/pyquarkchain

    steps:
      - checkout

      - restore_cache:
          keys:
          - pyquarkchain-dep-{{ checksum "requirements.txt" }}

      # Run tests!
      - run:
          name: Run py.test tests excluding integration test
          command: |
            if [[ $CIRCLE_NODE_INDEX = 0 ]]; then python3 -m pytest --ignore quarkchain/cluster/tests/test_cluster.py --timeout=30; fi

      - run:
          name: Run py.test tests only on integration test
          command: |
            if [[ $CIRCLE_NODE_INDEX = 1 ]]; then python3 -m pytest quarkchain/cluster/tests/test_cluster.py --timeout=90; fi

      - run:
          name: Run EVM tests - runner 1
          command: |
            if [[ $CIRCLE_NODE_INDEX = 2 ]]; then \
              # technique: https://unix.stackexchange.com/a/53533
              find fixtures/GeneralStateTests -name "*.json" | sort | sed -n 'n;p' | xargs cp --parents -t /tmp/ && \
              python3 quarkchain/evm/tests/test_state.py /tmp/fixtures/GeneralStateTests > /dev/null; \
            fi

      - run:
          name: Run EVM tests - runner 2
          command: |
            if [[ $CIRCLE_NODE_INDEX = 3 ]]; then \
              # technique: https://unix.stackexchange.com/a/53533
              find fixtures/GeneralStateTests -name "*.json" | sort | sed -n 'p;n' | xargs cp --parents -t /tmp/ && \
              python3 quarkchain/evm/tests/test_state.py /tmp/fixtures/GeneralStateTests > /dev/null; \
            fi

      - run:
          name: Run QuarkChain-specific EVM tests
          command: |
            if [[ $CIRCLE_NODE_INDEX = 3 ]]; then python3 quarkchain/evm/tests/test_state.py fixtures/QuarkChainStateTests/; fi

  download-snapshot:
    docker:
      - image: quarkchaindocker/pyquarkchain:mainnet1.1.1

    working_directory: /tmp

    steps:
      - run: mkdir -p workspace
      - run:
          name: Download DB snapshot
          command: |
            curl -s https://s3-us-west-2.amazonaws.com/qkcmainnet/data/sample-data.tar.gz --output data.tar.gz
            tar xvfz data.tar.gz
            rm data.tar.gz
          no_output_timeout: 1h
      - persist_to_workspace:
          root: workspace
          paths:
            - data

  check-db:
    docker:
      - image: quarkchaindocker/pyquarkchain:mainnet1.1.1

    working_directory: /code/pyquarkchain

    steps:
      - checkout

      - restore_cache:
          keys:
          - pyquarkchain-dep-{{ checksum "requirements.txt" }}

      - run:
          name: Calculate root chain tip height
          command: |
            echo 'export R_HEIGHT=$(python quarkchain/tools/db_browser.py --cluster_config=`pwd`/mainnet/singularity/cluster_config_template.json root_print_tip 2> /dev/null | grep "height" | awk "{print \$2}" | sed "s/,$//")' >> $BASH_ENV

      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Move data
          command: |
            mkdir -p quarkchain/cluster/qkc-data
            mv /tmp/workspace/data quarkchain/cluster/qkc-data/mainnet

      - run:
          name: Check DB
          command: |
            QKC__QUARKCHAIN__DISABLE_POW_CHECK=True ./run_cluster.sh --check_db=True --check_db_rblock_batch=100

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
  nightly:
    # triggers:
    #   - schedule:
    #       cron: "0 * * * *"
    #       filters:
    #         branches:
    #           only:
    #             - parallel-check-db
    jobs:
      - build
      - download-snapshot
      - check-db:
          requires:
            - build
            - download-snapshot
